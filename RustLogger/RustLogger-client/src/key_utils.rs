use rdev::Key;
use std::sync::Mutex;

lazy_static!{
    pub static ref SHIFT_PRESSED: Mutex<bool> = Mutex::new(false);
}

pub fn key_to_char(key: Key) -> String {
    let shift_pressed:bool=*SHIFT_PRESSED.lock().unwrap();
    match key {
        Key::KeyA => if shift_pressed { 'A' } else { 'a' }.to_string(),
        Key::KeyB => if shift_pressed { 'B' } else { 'b' }.to_string(),
        Key::KeyC => if shift_pressed { 'C' } else { 'c' }.to_string(),
        Key::KeyD => if shift_pressed { 'D' } else { 'd' }.to_string(),
        Key::KeyE => if shift_pressed { 'E' } else { 'e' }.to_string(),
        Key::KeyF => if shift_pressed { 'F' } else { 'f' }.to_string(),
        Key::KeyG => if shift_pressed { 'G' } else { 'g' }.to_string(),
        Key::KeyH => if shift_pressed { 'H' } else { 'h' }.to_string(),
        Key::KeyI => if shift_pressed { 'I' } else { 'i' }.to_string(),
        Key::KeyJ => if shift_pressed { 'J' } else { 'j' }.to_string(),
        Key::KeyK => if shift_pressed { 'K' } else { 'k' }.to_string(),
        Key::KeyL => if shift_pressed { 'L' } else { 'l' }.to_string(),
        Key::KeyM => if shift_pressed { 'M' } else { 'm' }.to_string(),
        Key::KeyN => if shift_pressed { 'N' } else { 'n' }.to_string(),
        Key::KeyO => if shift_pressed { 'O' } else { 'o' }.to_string(),
        Key::KeyP => if shift_pressed { 'P' } else { 'p' }.to_string(),
        Key::KeyQ => if shift_pressed { 'Q' } else { 'q' }.to_string(),
        Key::KeyR => if shift_pressed { 'R' } else { 'r' }.to_string(),
        Key::KeyS => if shift_pressed { 'S' } else { 's' }.to_string(),
        Key::KeyT => if shift_pressed { 'T' } else { 't' }.to_string(),
        Key::KeyU => if shift_pressed { 'U' } else { 'u' }.to_string(),
        Key::KeyV => if shift_pressed { 'V' } else { 'v' }.to_string(),
        Key::KeyW => if shift_pressed { 'W' } else { 'w' }.to_string(),
        Key::KeyX => if shift_pressed { 'X' } else { 'x' }.to_string(),
        Key::KeyY => if shift_pressed { 'Y' } else { 'y' }.to_string(),
        Key::KeyZ => if shift_pressed { 'Z' } else { 'z' }.to_string(),
        Key::Num1 => if shift_pressed { '!' } else { '1' }.to_string(),
        Key::Num2 => if shift_pressed { '@' } else { '2' }.to_string(),
        Key::Num3 => if shift_pressed { '#' } else { '3' }.to_string(),
        Key::Num4 => if shift_pressed { '$' } else { '4' }.to_string(),
        Key::Num5 => if shift_pressed { '%' } else { '5' }.to_string(),
        Key::Num6 => if shift_pressed { '^' } else { '6' }.to_string(),
        Key::Num7 => if shift_pressed { '&' } else { '7' }.to_string(),
        Key::Num8 => if shift_pressed { '*' } else { '8' }.to_string(),
        Key::Num9 => if shift_pressed { '(' } else { '9' }.to_string(),
        Key::Num0 => if shift_pressed { ')' } else { '0' }.to_string(),
        Key::Minus => if shift_pressed { '_' } else { '-' }.to_string(),
        Key::Equal => if shift_pressed { '+' } else { '=' }.to_string(),
        Key::BackQuote => if shift_pressed { '~' } else { '`' }.to_string(),
        Key::SemiColon => if shift_pressed { ':' } else { ';' }.to_string(),
        Key::Quote => if shift_pressed { '"' } else { '\'' }.to_string(),
        Key::BackSlash => if shift_pressed { '|' } else { '\\' }.to_string(),
        Key::IntlBackslash => if shift_pressed { '|' } else { '\\' }.to_string(), // Adjust if necessary
        Key::Comma => if shift_pressed { '<' } else { ',' }.to_string(),
        Key::Dot => if shift_pressed { '>' } else { '.' }.to_string(),
        Key::Slash => if shift_pressed { '?' } else { '/' }.to_string(),
        Key::LeftBracket => if shift_pressed { '{' } else { '[' }.to_string(),
        Key::RightBracket => if shift_pressed { '}' } else { ']' }.to_string(),
        Key::Space => ' '.to_string(),
        Key::Tab => '\t'.to_string(),
        Key::Backspace => '\u{7f}'.to_string(), 
        Key::Return => '\n'.to_string(), 
        Key::Function => "?".to_string(), 
        Key::PrintScreen => "?".to_string(), 
        Key::ScrollLock => "?".to_string(), 
        Key::Pause => "?".to_string(), 
        Key::NumLock => "?".to_string(), 
        Key::CapsLock => "?".to_string(), 
        Key::ControlLeft | Key::ControlRight => "?".to_string(), 
        Key::Alt | Key::AltGr => "?".to_string(), 
        Key::MetaLeft | Key::MetaRight => "?".to_string(), 
        Key::UpArrow => '↑'.to_string(),
        Key::DownArrow => '↓'.to_string(),
        Key::LeftArrow => '←'.to_string(),
        Key::RightArrow => '→'.to_string(),
        Key::PageUp => "PgUp".to_string(),
        Key::PageDown => "PgDn".to_string(),
        Key::Home => "Home".to_string(),
        Key::End => "End".to_string(),
        Key::Insert => "Ins".to_string(),
        Key::Delete => "Del".to_string(),
        Key::Unknown(_) => "?".to_string(),
        _ => "".to_string(),
    }
}